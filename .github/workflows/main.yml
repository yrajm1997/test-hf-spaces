name: Deploy to HF Spaces
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  train:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: pip install -r requirements/requirements.txt
    - name: Train and save pipeline
      run: python titanic_model/train_pipeline.py
    - uses: actions/upload-artifact@v3
      with:
        name: my-trained-pipeline
        path: titanic_model/trained_models/*.pkl
        retention-days: 1

  test:
    needs: train
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - uses: actions/download-artifact@v3
      with:
        name: my-trained-pipeline
        path: titanic_model/trained_models
    - name: Install dependencies
      run: pip install -r requirements/test_requirements.txt
    - name: Test with pytest
      run: pytest

  build:
    needs: [train, test]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - uses: actions/download-artifact@v3
      with:
        name: my-trained-pipeline
        path: titanic_model/trained_models
    - name: Install dependencies
      run: pip install --upgrade build
    - name: Build package
      run: python -m build
    - uses: actions/upload-artifact@v3
      with:
        name: my-build-package
        path: dist/*.whl
        retention-days: 1

  push-image:
    needs: [train, test, build]
    runs-on: ubuntu-latest
    steps:
    - name: Repo Checkout
      uses: actions/checkout@v3

    - uses: actions/download-artifact@v3
      with:
        name: my-build-package
        path: titanic_model_api

    - name: Login to Docker hub
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER_NAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASS_TOKEN }}
      run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD 

    - name: Build the Docker image for Fastapi app
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER_NAME }}
      run: docker build . -f Dockerfile -t $DOCKER_USER/titanic-api:latest

    - name: Push the Docker Image
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER_NAME }}
      run: docker push $DOCKER_USER/titanic-api

    - name: Logout to Docker hub
      run: docker logout


  spaces-deploy:
    needs: [train, test, build, push-image]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - name: Clone HF Space repo
      env:
        HF_USER: ${{ secrets.HF_USER_NAME }}
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
        HF_SPACE: ${{ secrets.HF_SPACE_NAME }}
      run: git clone https://$HF_USER:$HF_TOKEN@huggingface.co/spaces/$HF_USER/$HF_SPACE
        
    - name: Set remote origin
      env:
        HF_USER: ${{ secrets.HF_USER_NAME }}
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
        HF_SPACE: ${{ secrets.HF_SPACE_NAME }}
      working-directory: ./$HF_SPACE
      run: git remote set-url origin https://$HF_USER:$HF_TOKEN@huggingface.co/spaces/$HF_USER/$HF_SPACE
    
    - name: Update Dockerfile
      env:
        HF_SPACE: ${{ secrets.HF_SPACE_NAME }}
        DOCKER_USER: ${{ secrets.DOCKER_USER_NAME }}
      working-directory: ./$HF_SPACE
      run: |
        if grep -q "latest" Dockerfile ; then TEXT="FROM $DOCKER_USER/titanic-api" ; else TEXT="FROM $DOCKER_USER/titanic-api:latest" ; fi
        if [[ -f Dockerfile ]] ; then rm Dockerfile ; fi
        echo "$TEXT" >> Dockerfile
    
    - name: Commit changes
      env:
        HF_USER: ${{ secrets.HF_USER_NAME }}
        USER_EMAIL: ${{ secrets.USER_EMAIL }}
        HF_SPACE: ${{ secrets.HF_SPACE_NAME }}
      working-directory: ./$HF_SPACE
      run: |
        git config --global user.email "$USER_EMAIL"
        git config --global user.name "$HF_USER"
        git add Dockerfile
        git commit -m "dockerfile updated"

    - name: Push changes
      env:
        HF_SPACE: ${{ secrets.HF_SPACE_NAME }}
      working-directory: ./$HF_SPACE
      run: git push --force origin main

